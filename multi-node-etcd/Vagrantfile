# -*- mode: ruby -*-
# vi: set ft=ruby :
# Find your bridge interface name, e.g. with ip add or ifconfig or ipconfig
BRIDGE_IF="enp3s0"
# This will be the fixed IP address of the virtual machine
IP_ADDR_NODE01="192.168.2.200"
IP_ADDR_NODE02="192.168.2.201"
IP_ADDR_NODE03="192.168.2.202"

#Also adjust the 6 variables in the script section:
$generic= <<-GENERIC
# This will be the fixed IP address of the virtual machine
GATEWAY="192.168.2.254"
DNS="192.168.2.254"

wget -q https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz

if [ ! -f /tmp/50-vagrant.yaml ]; then
  echo "adding gateway"
  cp /etc/netplan/50-vagrant.yaml /tmp/
cat << EOF >> /etc/netplan/50-vagrant.yaml
      gateway4: $GATEWAY
      nameservers:
        addresses: [$DNS,9.9.9.9]
EOF

netplan --debug generate
netplan --debug apply

fi
echo "configuring SSH to allow passwords"
sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
echo "restarting ssh service"
service ssh restart
echo "sshd has been restarted"

# For etcd on every node
tar -xvf etcd-v3.4.3-linux-amd64.tar.gz
mv etcd-v3.4.3-linux-amd64/etcd /usr/local/bin/etcd
mv etcd-v3.4.3-linux-amd64/etcdctl /usr/local/bin/etcdctl
GENERIC

$kubePrep = <<-KUBEPREP
echo "[prepare] Turning off swap"
swapoff -a
cp /etc/fstab ~/fstab.old
sed -i '/swapfile/d' /etc/fstab

echo "[prepare] Installing Docker!"
apt-get update && apt-get install -y apt-transport-https ca-certificates software-properties-common docker.io
systemctl start docker &&  systemctl enable docker
usermod -aG docker $USER

echo "[kube-install] Installing Kubernetes"
apt-get update && apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

touch /etc/apt/sources.list.d/kubernetes.list
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list

apt-get update
apt-get install -y kubelet kubeadm kubectl
KUBEPREP

$nlb = <<-NLB
IP_ADDR_NODE01="192.168.2.200"
IP_ADDR_NODE02="192.168.2.201"
IP_ADDR_NODE03="192.168.2.202"

apt update && apt install haproxy -y
#apt update && apt install nginx -y
apt install -y apt-transport-https curl wget
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

touch /etc/apt/sources.list.d/kubernetes.list
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list

apt-get update
apt-get install -y kubectl

wget -q https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
wget -q https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
chmod +x cfssl*
mv cfssl_linux-amd64 /usr/local/bin/cfssl
mv cfssljson_linux-amd64 /usr/local/bin/cfssljson

echo "" >> /etc/haproxy/haproxy.cfg
echo "frontend kubernetes" >> /etc/haproxy/haproxy.cfg
echo "bind ${IP_ADDR_NODE01}:6443" >> /etc/haproxy/haproxy.cfg
echo "option tcplog" >> /etc/haproxy/haproxy.cfg
echo "mode tcp" >> /etc/haproxy/haproxy.cfg
echo "default_backend kubernetes-master-nodes" >> /etc/haproxy/haproxy.cfg
echo "" >> /etc/haproxy/haproxy.cfg
echo "backend kubernetes-master-nodes" >> /etc/haproxy/haproxy.cfg
echo "mode tcp" >> /etc/haproxy/haproxy.cfg
echo "balance roundrobin" >> /etc/haproxy/haproxy.cfg
echo "option tcp-check" >> /etc/haproxy/haproxy.cfg
echo "server k8s-master-0 ${IP_ADDR_NODE02}:6443 check fall 2 rise 1" >> /etc/haproxy/haproxy.cfg
echo "server k8s-master-1 ${IP_ADDR_NODE03}:6443 check fall 2 rise 1" >> /etc/haproxy/haproxy.cfg
systemctl restart haproxy
NLB


Vagrant.configure("2") do |config|
  config.vm.define "node01" do |node01_config|
    node01_config.vm.box = "ubuntu/bionic64"
    node01_config.vm.hostname = "nlb01"
    node01_config.vm.network "public_network", bridge: BRIDGE_IF, ip: IP_ADDR_NODE01
    node01_config.vm.provider "virtualbox" do |v|
      v.linked_clone = true
      v.memory = 4096
    end
    node01_config.vm.provision "shell", inline: $generic
    node01_config.vm.provision "shell", inline: $nlb
  end

  config.vm.define "node02" do |node02_config|
    node02_config.vm.box = "ubuntu/bionic64"
    node02_config.vm.hostname = "kube01"
    node02_config.vm.network "public_network", bridge: BRIDGE_IF, ip: IP_ADDR_NODE02
    node02_config.vm.provider "virtualbox" do |v|
      v.linked_clone = true
      v.memory = 4096
    end
    node02_config.vm.provision "shell", inline: $generic
    node02_config.vm.provision "shell", inline: $kubePrep
  end

  config.vm.define "node03" do |node03_config|
    node03_config.vm.box = "ubuntu/bionic64"
    node03_config.vm.hostname = "kube02"
    node03_config.vm.network "public_network", bridge: BRIDGE_IF, ip: IP_ADDR_NODE03
    node03_config.vm.provider "virtualbox" do |v|
      v.linked_clone = true
      v.memory = 4096
    end
    node03_config.vm.provision "shell", inline: $generic
    node03_config.vm.provision "shell", inline: $kubePrep
  end
end
